// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// WebPageServiceClient is the client API for WebPageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebPageServiceClient interface {
	CreateWebPage(ctx context.Context, in *CreateWebPageRequest, opts ...grpc.CallOption) (*CreateWebPageResponse, error)
	ReadWebPage(ctx context.Context, in *ReadWebPageRequest, opts ...grpc.CallOption) (*ReadWebPageResponse, error)
	UpdateWebPage(ctx context.Context, in *UpdateWebPageRequest, opts ...grpc.CallOption) (*UpdateWebPageResponse, error)
	DeleteWebPage(ctx context.Context, in *DeleteWebPageRequest, opts ...grpc.CallOption) (*DeleteWebPageResponse, error)
	ListWebPages(ctx context.Context, in *ListWebPageRequest, opts ...grpc.CallOption) (*ListWebPageResults, error)
}

type webPageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebPageServiceClient(cc grpc.ClientConnInterface) WebPageServiceClient {
	return &webPageServiceClient{cc}
}

func (c *webPageServiceClient) CreateWebPage(ctx context.Context, in *CreateWebPageRequest, opts ...grpc.CallOption) (*CreateWebPageResponse, error) {
	out := new(CreateWebPageResponse)
	err := c.cc.Invoke(ctx, "/v0.WebPageService/CreateWebPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webPageServiceClient) ReadWebPage(ctx context.Context, in *ReadWebPageRequest, opts ...grpc.CallOption) (*ReadWebPageResponse, error) {
	out := new(ReadWebPageResponse)
	err := c.cc.Invoke(ctx, "/v0.WebPageService/ReadWebPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webPageServiceClient) UpdateWebPage(ctx context.Context, in *UpdateWebPageRequest, opts ...grpc.CallOption) (*UpdateWebPageResponse, error) {
	out := new(UpdateWebPageResponse)
	err := c.cc.Invoke(ctx, "/v0.WebPageService/UpdateWebPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webPageServiceClient) DeleteWebPage(ctx context.Context, in *DeleteWebPageRequest, opts ...grpc.CallOption) (*DeleteWebPageResponse, error) {
	out := new(DeleteWebPageResponse)
	err := c.cc.Invoke(ctx, "/v0.WebPageService/DeleteWebPage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webPageServiceClient) ListWebPages(ctx context.Context, in *ListWebPageRequest, opts ...grpc.CallOption) (*ListWebPageResults, error) {
	out := new(ListWebPageResults)
	err := c.cc.Invoke(ctx, "/v0.WebPageService/ListWebPages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebPageServiceServer is the server API for WebPageService service.
// All implementations must embed UnimplementedWebPageServiceServer
// for forward compatibility
type WebPageServiceServer interface {
	CreateWebPage(context.Context, *CreateWebPageRequest) (*CreateWebPageResponse, error)
	ReadWebPage(context.Context, *ReadWebPageRequest) (*ReadWebPageResponse, error)
	UpdateWebPage(context.Context, *UpdateWebPageRequest) (*UpdateWebPageResponse, error)
	DeleteWebPage(context.Context, *DeleteWebPageRequest) (*DeleteWebPageResponse, error)
	ListWebPages(context.Context, *ListWebPageRequest) (*ListWebPageResults, error)
	mustEmbedUnimplementedWebPageServiceServer()
}

// UnimplementedWebPageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebPageServiceServer struct {
}

func (UnimplementedWebPageServiceServer) CreateWebPage(context.Context, *CreateWebPageRequest) (*CreateWebPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebPage not implemented")
}
func (UnimplementedWebPageServiceServer) ReadWebPage(context.Context, *ReadWebPageRequest) (*ReadWebPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadWebPage not implemented")
}
func (UnimplementedWebPageServiceServer) UpdateWebPage(context.Context, *UpdateWebPageRequest) (*UpdateWebPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebPage not implemented")
}
func (UnimplementedWebPageServiceServer) DeleteWebPage(context.Context, *DeleteWebPageRequest) (*DeleteWebPageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebPage not implemented")
}
func (UnimplementedWebPageServiceServer) ListWebPages(context.Context, *ListWebPageRequest) (*ListWebPageResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebPages not implemented")
}
func (UnimplementedWebPageServiceServer) mustEmbedUnimplementedWebPageServiceServer() {}

// UnsafeWebPageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebPageServiceServer will
// result in compilation errors.
type UnsafeWebPageServiceServer interface {
	mustEmbedUnimplementedWebPageServiceServer()
}

func RegisterWebPageServiceServer(s grpc.ServiceRegistrar, srv WebPageServiceServer) {
	s.RegisterService(&_WebPageService_serviceDesc, srv)
}

func _WebPageService_CreateWebPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebPageServiceServer).CreateWebPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v0.WebPageService/CreateWebPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebPageServiceServer).CreateWebPage(ctx, req.(*CreateWebPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebPageService_ReadWebPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadWebPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebPageServiceServer).ReadWebPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v0.WebPageService/ReadWebPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebPageServiceServer).ReadWebPage(ctx, req.(*ReadWebPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebPageService_UpdateWebPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebPageServiceServer).UpdateWebPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v0.WebPageService/UpdateWebPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebPageServiceServer).UpdateWebPage(ctx, req.(*UpdateWebPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebPageService_DeleteWebPage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWebPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebPageServiceServer).DeleteWebPage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v0.WebPageService/DeleteWebPage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebPageServiceServer).DeleteWebPage(ctx, req.(*DeleteWebPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebPageService_ListWebPages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWebPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebPageServiceServer).ListWebPages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v0.WebPageService/ListWebPages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebPageServiceServer).ListWebPages(ctx, req.(*ListWebPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WebPageService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v0.WebPageService",
	HandlerType: (*WebPageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWebPage",
			Handler:    _WebPageService_CreateWebPage_Handler,
		},
		{
			MethodName: "ReadWebPage",
			Handler:    _WebPageService_ReadWebPage_Handler,
		},
		{
			MethodName: "UpdateWebPage",
			Handler:    _WebPageService_UpdateWebPage_Handler,
		},
		{
			MethodName: "DeleteWebPage",
			Handler:    _WebPageService_DeleteWebPage_Handler,
		},
		{
			MethodName: "ListWebPages",
			Handler:    _WebPageService_ListWebPages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "web_page.proto",
}
