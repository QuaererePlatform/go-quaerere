// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v0

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// WebSiteServiceClient is the client API for WebSiteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebSiteServiceClient interface {
	CreateWebSite(ctx context.Context, in *CreateWebSiteRequest, opts ...grpc.CallOption) (*CreateWebSiteResponse, error)
	ReadWebSite(ctx context.Context, in *ReadWebSiteRequest, opts ...grpc.CallOption) (*ReadWebSiteResponse, error)
	UpdateWebSite(ctx context.Context, in *UpdateWebSiteRequest, opts ...grpc.CallOption) (*UpdateWebSiteResponse, error)
	DeleteWebSite(ctx context.Context, in *DeleteWebSiteRequest, opts ...grpc.CallOption) (*DeleteWebSiteResponse, error)
	ListWebSites(ctx context.Context, in *ListWebSiteRequest, opts ...grpc.CallOption) (*ListWebSiteResults, error)
}

type webSiteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWebSiteServiceClient(cc grpc.ClientConnInterface) WebSiteServiceClient {
	return &webSiteServiceClient{cc}
}

func (c *webSiteServiceClient) CreateWebSite(ctx context.Context, in *CreateWebSiteRequest, opts ...grpc.CallOption) (*CreateWebSiteResponse, error) {
	out := new(CreateWebSiteResponse)
	err := c.cc.Invoke(ctx, "/v0.WebSiteService/CreateWebSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSiteServiceClient) ReadWebSite(ctx context.Context, in *ReadWebSiteRequest, opts ...grpc.CallOption) (*ReadWebSiteResponse, error) {
	out := new(ReadWebSiteResponse)
	err := c.cc.Invoke(ctx, "/v0.WebSiteService/ReadWebSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSiteServiceClient) UpdateWebSite(ctx context.Context, in *UpdateWebSiteRequest, opts ...grpc.CallOption) (*UpdateWebSiteResponse, error) {
	out := new(UpdateWebSiteResponse)
	err := c.cc.Invoke(ctx, "/v0.WebSiteService/UpdateWebSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSiteServiceClient) DeleteWebSite(ctx context.Context, in *DeleteWebSiteRequest, opts ...grpc.CallOption) (*DeleteWebSiteResponse, error) {
	out := new(DeleteWebSiteResponse)
	err := c.cc.Invoke(ctx, "/v0.WebSiteService/DeleteWebSite", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webSiteServiceClient) ListWebSites(ctx context.Context, in *ListWebSiteRequest, opts ...grpc.CallOption) (*ListWebSiteResults, error) {
	out := new(ListWebSiteResults)
	err := c.cc.Invoke(ctx, "/v0.WebSiteService/ListWebSites", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebSiteServiceServer is the server API for WebSiteService service.
// All implementations must embed UnimplementedWebSiteServiceServer
// for forward compatibility
type WebSiteServiceServer interface {
	CreateWebSite(context.Context, *CreateWebSiteRequest) (*CreateWebSiteResponse, error)
	ReadWebSite(context.Context, *ReadWebSiteRequest) (*ReadWebSiteResponse, error)
	UpdateWebSite(context.Context, *UpdateWebSiteRequest) (*UpdateWebSiteResponse, error)
	DeleteWebSite(context.Context, *DeleteWebSiteRequest) (*DeleteWebSiteResponse, error)
	ListWebSites(context.Context, *ListWebSiteRequest) (*ListWebSiteResults, error)
	mustEmbedUnimplementedWebSiteServiceServer()
}

// UnimplementedWebSiteServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWebSiteServiceServer struct {
}

func (UnimplementedWebSiteServiceServer) CreateWebSite(context.Context, *CreateWebSiteRequest) (*CreateWebSiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWebSite not implemented")
}
func (UnimplementedWebSiteServiceServer) ReadWebSite(context.Context, *ReadWebSiteRequest) (*ReadWebSiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadWebSite not implemented")
}
func (UnimplementedWebSiteServiceServer) UpdateWebSite(context.Context, *UpdateWebSiteRequest) (*UpdateWebSiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWebSite not implemented")
}
func (UnimplementedWebSiteServiceServer) DeleteWebSite(context.Context, *DeleteWebSiteRequest) (*DeleteWebSiteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWebSite not implemented")
}
func (UnimplementedWebSiteServiceServer) ListWebSites(context.Context, *ListWebSiteRequest) (*ListWebSiteResults, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWebSites not implemented")
}
func (UnimplementedWebSiteServiceServer) mustEmbedUnimplementedWebSiteServiceServer() {}

// UnsafeWebSiteServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebSiteServiceServer will
// result in compilation errors.
type UnsafeWebSiteServiceServer interface {
	mustEmbedUnimplementedWebSiteServiceServer()
}

func RegisterWebSiteServiceServer(s grpc.ServiceRegistrar, srv WebSiteServiceServer) {
	s.RegisterService(&_WebSiteService_serviceDesc, srv)
}

func _WebSiteService_CreateWebSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWebSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSiteServiceServer).CreateWebSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v0.WebSiteService/CreateWebSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSiteServiceServer).CreateWebSite(ctx, req.(*CreateWebSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSiteService_ReadWebSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadWebSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSiteServiceServer).ReadWebSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v0.WebSiteService/ReadWebSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSiteServiceServer).ReadWebSite(ctx, req.(*ReadWebSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSiteService_UpdateWebSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWebSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSiteServiceServer).UpdateWebSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v0.WebSiteService/UpdateWebSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSiteServiceServer).UpdateWebSite(ctx, req.(*UpdateWebSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSiteService_DeleteWebSite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWebSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSiteServiceServer).DeleteWebSite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v0.WebSiteService/DeleteWebSite",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSiteServiceServer).DeleteWebSite(ctx, req.(*DeleteWebSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebSiteService_ListWebSites_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWebSiteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebSiteServiceServer).ListWebSites(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/v0.WebSiteService/ListWebSites",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebSiteServiceServer).ListWebSites(ctx, req.(*ListWebSiteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WebSiteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "v0.WebSiteService",
	HandlerType: (*WebSiteServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWebSite",
			Handler:    _WebSiteService_CreateWebSite_Handler,
		},
		{
			MethodName: "ReadWebSite",
			Handler:    _WebSiteService_ReadWebSite_Handler,
		},
		{
			MethodName: "UpdateWebSite",
			Handler:    _WebSiteService_UpdateWebSite_Handler,
		},
		{
			MethodName: "DeleteWebSite",
			Handler:    _WebSiteService_DeleteWebSite_Handler,
		},
		{
			MethodName: "ListWebSites",
			Handler:    _WebSiteService_ListWebSites_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "web_site.proto",
}
